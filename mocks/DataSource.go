// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	firestore "cloud.google.com/go/firestore"
	mock "github.com/stretchr/testify/mock"

	model "insultService/model"
)

// DataSource is an autogenerated mock type for the DataSource type
type DataSource struct {
	mock.Mock
}

// CloseConnection provides a mock function with given fields:
func (_m *DataSource) CloseConnection() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertInsultEntry provides a mock function with given fields: content
func (_m *DataSource) InsertEntry(content model.InsultContent) (*firestore.DocumentRef, *firestore.WriteResult, error) {
	ret := _m.Called(content)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(model.InsultContent) *firestore.DocumentRef); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	var r1 *firestore.WriteResult
	if rf, ok := ret.Get(1).(func(model.InsultContent) *firestore.WriteResult); ok {
		r1 = rf(content)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firestore.WriteResult)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(model.InsultContent) error); ok {
		r2 = rf(content)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OpenConnection provides a mock function with given fields:
func (_m *DataSource) OpenConnection() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadEntries provides a mock function with given fields:
func (_m *DataSource) ReadEntries() (*firestore.DocumentSnapshot, error) {
	ret := _m.Called()

	var r0 *firestore.DocumentSnapshot
	if rf, ok := ret.Get(0).(func() *firestore.DocumentSnapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentSnapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
